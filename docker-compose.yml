version: '3.9'
# docker-compose up --build
networks:
  app-network:
    driver: bridge

services:

# APIS BEGIN -----------------------------------------------------------------------------

  poc.twilio.api.webapi:
    image: ${DOCKER_REGISTRY-}poc.twilio.api.webapi
    container_name: poc.twilio.api.webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/Poc.Twilio.API/Dockerfile
    expose:
      - 5078
    ports:
      - 5078:5078
    links:
      - redis
      - mongoserver
      - kafka
      - rabbitmq
    networks:
      - app-network
    depends_on:
      - redis
      - mongoserver
      - kafka
      - rabbitmq
      
  poc.api.gateway-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.gateway-webapi
    container_name: poc.api.gateway-webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/poc.cqrs.api.mock.net8/poc.api.gateway.net8/Dockerfile
    expose:
      - 5254
    ports:
      - 5254:5254
    links:
      - poc.api.mongodb-webapi
      - poc.api.redis-webapi
    networks:
      - app-network
    depends_on:
      - poc.api.mongodb-webapi
      - poc.api.redis-webapi

  poc.api.mongodb-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.mongodb-webapi
    container_name: poc.api.mongodb-webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/poc.cqrs.api.mock.net8/poc.api.mongodb.net8/Dockerfile
    expose:
      - 5073
    ports:
      - 5073:5073
    links:
      - mongoserver
    networks:
      - app-network
    depends_on:
      - mongoserver

  poc.api.redis-webapi:
    image: ${DOCKER_REGISTRY-}poc.api.redis-webapi
    container_name: poc.api.redis-webapi
    restart: always
    build:
      context: .
      dockerfile: src/01-Presentation/poc.cqrs.api.mock.net8/poc.api.redis.net8/Dockerfile
    expose:
      - 5074
    ports:
      - 5074:5074
    links:
      - redis 
      - mongoserver
      - kafka
    networks:
      - app-network
    depends_on:
      - redis
      - mongoserver
      - kafka

# APIS END -----------------------------------------------------------------------------

# DB BEGIN -----------------------------------------------------------------------------

  # Redis Cache Server
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6379:6379
    networks:
      - app-network

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-network

# DB END -----------------------------------------------------------------------------

# WORKER BEGIN -----------------------------------------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    networks: 
      - app-network
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    networks: 
      - app-network
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # http://localhost:9000    
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9000:9000"  # Porta que o Kafdrop ficará acessível
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"  # Endereço do broker Kafka, ajuste conforme necessário
      JVM_OPTS: "-Xms32M -Xmx64M"  # Configurações de JVM, ajuste conforme suas necessidades
      SERVER_SERVLET_CONTEXTPATH: "/"  # Contexto raiz do Kafdrop
    depends_on:
      - kafka  # Garante que o Kafka esteja pronto antes de iniciar o Kafdrop
    networks:
      - app-network   

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-network

# WORKER END ----------------------------------------------------------------------------- 
